<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}Relat√≥rio Financeiro{% endblock %}</title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/static/styles.css">
  
  <!-- Script de teste para verificar se JavaScript est√° funcionando -->
  <script>
    console.log('=== TESTE: JavaScript est√° carregando ===');
    console.log('Data/Hora do carregamento:', new Date().toISOString());
    
    // Definir fun√ß√£o de teste imediatamente
    window.testJavaScript = function() {
      console.log('=== TESTE: Fun√ß√£o testJavaScript chamada ===');
      
      const resultDiv = document.getElementById('testResult');
      if (resultDiv) {
        resultDiv.innerHTML = `
          <div class="alert alert-success">
            <strong>‚úÖ JavaScript est√° funcionando!</strong><br>
            Data/Hora: ${new Date().toLocaleString()}<br>
            Navegador: ${navigator.userAgent}<br>
            Console: Verifique o console do navegador (F12) para mais detalhes
          </div>
        `;
      }
      
      // Testar se as fun√ß√µes principais est√£o dispon√≠veis
      console.log('toggleColumnControls dispon√≠vel:', typeof toggleColumnControls);
      console.log('toggleColumn dispon√≠vel:', typeof toggleColumn);
      console.log('toggleMobileView dispon√≠vel:', typeof toggleMobileView);
      
      // Testar se os elementos est√£o presentes
      console.log('Elementos encontrados:');
      console.log('- toggle-descricao:', !!document.getElementById('toggle-descricao'));
      console.log('- toggle-ocr:', !!document.getElementById('toggle-ocr'));
      console.log('- columnControlsSection:', !!document.getElementById('columnControlsSection'));
      console.log('- Bot√£o toggle:', !!document.querySelector('[onclick="toggleColumnControls()"]'));
    };
    
    // Definir fun√ß√£o toggleColumn imediatamente
    window.toggleColumn = function(columnClass, show) {
      console.log(`=== toggleColumn chamada: ${columnClass}, show: ${show} ===`);
      const elements = document.querySelectorAll(`.${columnClass}`);
      console.log(`Elementos encontrados com classe ${columnClass}:`, elements.length);
      
      elements.forEach(el => {
        if (show) {
          el.classList.remove('hidden');
          console.log(`Removendo classe 'hidden' de elemento:`, el);
        } else {
          el.classList.add('hidden');
          console.log(`Adicionando classe 'hidden' a elemento:`, el);
        }
      });
    };
    
    // Definir fun√ß√£o toggleMobileView
    window.toggleMobileView = function() {
      console.log('=== toggleMobileView CHAMADA ===');
      const body = document.body;
      if (body.classList.contains('mobile-view')) {
        body.classList.remove('mobile-view');
        console.log('Modo mobile desativado');
      } else {
        body.classList.add('mobile-view');
        console.log('Modo mobile ativado');
      }
    };
    
    if (document.readyState === 'loading') {
      console.log('DOM ainda carregando...');
    } else {
      console.log('DOM j√° carregado!');
    }
  </script>
  <style>
    {% block extra_styles %}{% endblock %}
    .totalizadores {
      background: #f8f9fa;
      border: 2px solid #dee2e6;
      border-radius: 8px;
      padding: 15px;
      margin: 20px 0;
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
      gap: 20px;
    }
    .totalizador {
      text-align: center;
      min-width: 150px;
    }
    .totalizador h3 {
      margin: 0 0 5px 0;
      color: #495057;
      font-size: 14px;
      font-weight: bold;
    }
    .totalizador .valor {
      font-size: 24px;
      font-weight: bold;
      color: #28a745;
    }
    .totalizador .valor.zero {
      color: #6c757d;
    }
    .totalizador .label {
      font-size: 12px;
      color: #6c757d;
      margin-top: 5px;
    }
    
    /* Controles de colunas */
    .column-controls {
      margin-bottom: 15px;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 6px;
      border: 1px solid #dee2e6;
    }
    
    .column-controls .form-check {
      margin-right: 15px;
      margin-bottom: 5px;
    }
    
    .column-controls .form-check-input:checked + .form-check-label {
      color: #0d6efd;
      font-weight: 500;
    }
    
    /* Classes de visibilidade */
    .desktop-only {
      display: table-cell;
    }
    
    .optional-column {
      display: table-cell;
    }
    
    .optional-column.hidden {
      display: none;
    }
    
    @media (max-width: 768px) {
      .desktop-only {
        display: none !important;
      }
      
      .optional-column {
        display: none;
      }
      
      .optional-column.show-mobile {
        display: table-cell;
      }
    }
  </style>
  {% block extra_head %}{% endblock %}
</head>
<body>
  <div class="container">
    <h1>{% block header_title %}Relat√≥rio de Presta√ß√£o de Contas{% endblock %}</h1>
    <div class="info">Gerado automaticamente em {{ timestamp }}</div>
    
    {% if totalizadores %}
    <div class="totalizadores">
      <div class="totalizador">
        <h3>Ricardo</h3>
        <div class="valor {% if totalizadores.ricardo_float == 0 %}zero{% endif %}">
          R$ {{ totalizadores.ricardo }}
        </div>
        <div class="label">Total do per√≠odo</div>
      </div>
      <div class="totalizador">
        <h3>Rafael</h3>
        <div class="valor {% if totalizadores.rafael_float == 0 %}zero{% endif %}">
          R$ {{ totalizadores.rafael }}
        </div>
        <div class="label">Total do per√≠odo</div>
      </div>
      <div class="totalizador">
        <h3>Total Geral</h3>
        <div class="valor {% if totalizadores.ricardo_float + totalizadores.rafael_float == 0 %}zero{% endif %}">
          R$ {{ "%.2f"|format(totalizadores.ricardo_float + totalizadores.rafael_float) }}
        </div>
        <div class="label">Soma de ambos</div>
      </div>
    </div>
    {% endif %}
    
    <div style="text-align:right; margin-bottom:10px;">
      {% block header_buttons %}{% endblock %}
    </div>
    
    <!-- Controles de colunas opcionais -->
    <div class="card mb-4">
      <div class="card-header column-controls-toggle" onclick="toggleColumnControls()" 
           data-bs-toggle="tooltip" data-bs-placement="top" 
           data-bs-title="Controles de colunas opcionais. Clique para expandir/recolher.">
        <i class="bi bi-gear me-2"></i>
        Controles de Colunas Opcionais
        <i class="bi bi-chevron-down ms-auto" id="columnControlsToggleIcon"></i>
      </div>
      <div class="card-body" id="columnControlsSection" style="display: none;">
        <div class="row">
          <div class="col-md-6">
            <h6 class="mb-2">üìä Colunas Opcionais:</h6>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="checkbox" id="toggle-descricao">
              <label class="form-check-label" for="toggle-descricao">
                Descri√ß√£o
              </label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="checkbox" id="toggle-ocr">
              <label class="form-check-label" for="toggle-ocr">
                OCR
              </label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="checkbox" id="toggle-data-hora">
              <label class="form-check-label" for="toggle-data-hora">
                Data-Hora
              </label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="checkbox" id="toggle-classificacao">
              <label class="form-check-label" for="toggle-classificacao">
                Classifica√ß√£o
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <table>
      <thead>
        {% block table_head %}
          <tr>
            <th class="desktop-only data-hora-cell">Data-Hora</th>
            <th class="classificacao-cell">
              <button id="toggle-payments" class="toggle-payments-btn" aria-label="Alternar pagamentos">
                {% block toggle_button_content %}‚áÑ{% endblock %}
              </button>
            </th>
            <th>Ricardo (R$)</th>
            <th>Rafael (R$)</th>
            <th>Anexo</th>
            <th class="optional-column descricao-cell">Descri√ß√£o</th>
            <th class="optional-column desktop-only ocr-cell">OCR</th>
            {% if tem_motivo %}
              <th>Motivo do Erro</th>
            {% endif %}
            {% if is_editable %}
              <th>A√ß√µes</th>
            {% endif %}
          </tr>
        {% endblock %}
      </thead>
      <tbody>
        {% block table_body %}
          {# linhas ser√£o renderizadas nas views filhas #}
        {% endblock %}
      </tbody>
    </table>
    
    {% block extra_content %}{% endblock %}
  </div>
  
  <div id="modal" class="modal" onclick="hideModal()">
    <img id="modal-img" class="modal-content">
  </div>
  
  <!-- Bootstrap JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- Definir fun√ß√£o toggleColumnControls antes de carregar scripts externos -->
  <script>
    // Definir a fun√ß√£o toggleColumnControls imediatamente
    window.toggleColumnControls = function() {
      const configSection = document.getElementById('columnControlsSection');
      const toggleIcon = document.getElementById('columnControlsToggleIcon');
      
      if (configSection && toggleIcon) {
        if (configSection.classList.contains('show')) {
          configSection.classList.remove('show');
          configSection.style.display = 'none';
          toggleIcon.className = 'bi bi-chevron-down ms-auto';
        } else {
          configSection.classList.add('show');
          configSection.style.display = 'block';
          toggleIcon.className = 'bi bi-chevron-up ms-auto';
        }
      } else {
        console.error('Elementos columnControlsSection ou columnControlsToggleIcon n√£o encontrados');
      }
    };
  </script>
  
  <!-- Custom JavaScript -->
  <script src="../static/scripts.js"></script>
  
  <script>
    // Garantir que as fun√ß√µes estejam dispon√≠veis ap√≥s o carregamento
    document.addEventListener('DOMContentLoaded', function() {
      // Inicializar tooltips do Bootstrap
      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });
      
      // Verificar se a fun√ß√£o toggleColumnControls est√° dispon√≠vel
      if (typeof toggleColumnControls === 'undefined') {
        console.error('Fun√ß√£o toggleColumnControls n√£o encontrada');
        // Definir a fun√ß√£o como fallback
        window.toggleColumnControls = function() {
          const configSection = document.getElementById('columnControlsSection');
          const toggleIcon = document.getElementById('columnControlsToggleIcon');
          
          if (configSection.classList.contains('show')) {
            configSection.classList.remove('show');
            configSection.style.display = 'none';
            toggleIcon.className = 'bi bi-chevron-down ms-auto';
          } else {
            configSection.classList.add('show');
            configSection.style.display = 'block';
            toggleIcon.className = 'bi bi-chevron-up ms-auto';
          }
        };
        console.log('Fun√ß√£o toggleColumnControls definida como fallback');
      }
      
      const toggleDescricao = document.getElementById('toggle-descricao');
      const toggleOcr = document.getElementById('toggle-ocr');
      const toggleDataHora = document.getElementById('toggle-data-hora');
      const toggleClassificacao = document.getElementById('toggle-classificacao');
      const toggleMobileViewCheckbox = document.getElementById('toggle-mobile-view');
      
      console.log('toggleDescricao encontrado:', !!toggleDescricao);
      console.log('toggleOcr encontrado:', !!toggleOcr);
      console.log('toggleDataHora encontrado:', !!toggleDataHora);
      console.log('toggleClassificacao encontrado:', !!toggleClassificacao);
      
      // Inicializar estado das colunas
      if (toggleDescricao) {
        toggleColumn('descricao-cell', toggleDescricao.checked);
        console.log('Estado inicial toggleDescricao:', toggleDescricao.checked);
        toggleDescricao.addEventListener('change', function() {
          toggleColumn('descricao-cell', this.checked);
        });
      }
      
      if (toggleOcr) {
        toggleColumn('ocr-cell', toggleOcr.checked);
        console.log('Estado inicial toggleOcr:', toggleOcr.checked);
        toggleOcr.addEventListener('change', function() {
          toggleColumn('ocr-cell', this.checked);
        });
      }
      
      if (toggleDataHora) {
        toggleColumn('data-hora-cell', toggleDataHora.checked);
        console.log('Estado inicial toggleDataHora:', toggleDataHora.checked);
        toggleDataHora.addEventListener('change', function() {
          toggleColumn('data-hora-cell', this.checked);
        });
      }
      
      if (toggleClassificacao) {
        toggleColumn('classificacao-cell', toggleClassificacao.checked);
        console.log('Estado inicial toggleClassificacao:', toggleClassificacao.checked);
        toggleClassificacao.addEventListener('change', function() {
          toggleColumn('classificacao-cell', this.checked);
        });
      }
      
      if (toggleMobileViewCheckbox) {
        console.log('Adicionando event listener para toggleMobileViewCheckbox');
        toggleMobileViewCheckbox.addEventListener('change', function(e) {
          console.log('=== EVENTO CHANGE toggleMobileView ===');
          console.log('Novo valor:', e.target.checked);
          toggleMobileView();
        });
      }
      
      console.log('=== EVENT LISTENERS INICIALIZADOS ===');
    });
  </script>
  
  {% block extra_scripts %}{% endblock %}
</body>
</html> 