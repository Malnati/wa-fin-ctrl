            classificacao_html = f'<span class="classificacao {class_css}">{classificacao}</span>' if classificacao != 'nan' else ''

            # Valores monet√°rios
            ricardo = str(row.get('RICARDO', ''))
            rafael = str(row.get('RAFAEL', ''))
            ricardo_html = f'<span class="valor">{ricardo}</span>' if ricardo != 'nan' and ricardo != '' else ''
            rafael_html = f'<span class="valor">{rafael}</span>' if rafael != 'nan' and rafael != '' else ''

            # Determina se √© linha de total
            remetente = str(row.get('REMETENTE', ''))
            row_class = 'total-row' if 'TOTAL' in remetente.upper() else ''

            # Para linhas de totaliza√ß√£o, n√£o exibe imagem
            if row_class == 'total-row':
                img_html = ''
            else:
                # Imagem do anexo
                anexo = str(row.get('ANEXO', ''))
                img_html = ""
                if anexo != 'nan' and anexo != '' and anexo.lower().endswith(('.jpg', '.jpeg', '.png')):
                    # Tenta encontrar a imagem em imgs/ primeiro, depois em input/
                    img_path = None
                    for diretorio in ['imgs', 'input']:
                        caminho_completo = Path(diretorio) / anexo
                        if caminho_completo.is_file():
                            img_path = caminho_completo
                            break

                    if img_path:
                        try:
                            with open(img_path, "rb") as f:
                                encoded = base64.b64encode(f.read()).decode()
                                ext = img_path.suffix.replace(".", "").lower()
                                if ext == 'jpg':
                                    ext = 'jpeg'
                                img_html = f'<img src="data:image/{ext};base64,{encoded}" class="thumb" alt="Comprovante {anexo}" title="{anexo}" onclick="showModal(this.src)">'
                        except Exception as e:
                                print(f"Erro ao processar imagem {anexo}: {e}")
                                img_html = f'<span style="color: #e74c3c; font-size: 11px;">Erro: {anexo}</span>'
                    else:
                        img_html = f'<span style="color: #f39c12; font-size: 11px;">N√£o encontrado: {anexo}</span>'

            # Descri√ß√£o
            descricao = str(row.get('DESCRICAO', ''))
            descricao_html = descricao if descricao != 'nan' else ''

            html += f'''        <tr class="{row_class}">
          <td class="data-hora">{data_hora}</td>
          <td>{classificacao_html}</td>
          <td>{ricardo_html}</td>
          <td>{rafael_html}</td>
          <td>{img_html}</td>
          <td style="text-align: left; font-size: 12px;">{descricao_html}</td>
        </tr>
'''

        html += '''      </tbody>
    </table>
  </div>

  <div id="modal" class="modal" onclick="hideModal()">
    <img class="modal-content" id="modal-img">
  </div>

  <script>
    function showModal(imgSrc) {
      const modal = document.getElementById('modal');
      const modalImg = document.getElementById('modal-img');
      modalImg.src = imgSrc;
      modal.classList.add('show');
    }
    function hideModal() {
      const modal = document.getElementById('modal');
      modal.classList.remove('show');
    }
    // Toggle payments visibility
    let showPayments = false;
    document.addEventListener('DOMContentLoaded', () => {
      const toggleBtn = document.getElementById('toggle-payments');
      toggleBtn.addEventListener('click', () => {
        showPayments = !showPayments;
        document.querySelectorAll('tbody tr').forEach(row => {
          const isPayment = row.querySelector('td:nth-child(2) .classificacao.pagamento');
          row.style.display = isPayment ? (showPayments ? '' : 'none') : '';
        });
      });
      // Hide payments by default
      document.querySelectorAll('tbody tr').forEach(row => {
        const isPayment = row.querySelector('td:nth-child(2) .classificacao.pagamento');
        if (isPayment) row.style.display = 'none';
      });
    });
    
    // Simula progresso de carregamento e esconde overlay quando completar
    document.addEventListener('DOMContentLoaded', () => {
      const overlay = document.getElementById('loading-overlay');
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      
      if (overlay && progressBar && progressText) {
        let progress = 0;
        const interval = setInterval(() => {
          progress += Math.random() * 15 + 5; // Incremento aleat√≥rio entre 5-20%
          if (progress >= 100) {
            progress = 100;
            clearInterval(interval);
            setTimeout(() => {
              overlay.style.display = 'none';
            }, 500); // Pequena pausa no 100% antes de esconder
          }
          progressBar.style.width = progress + '%';
          progressText.textContent = Math.round(progress) + '%';
        }, 100); // Atualiza a cada 100ms
      }
    });
  </script>
</body>
</html>'''

        with open("report.html", "w", encoding="utf-8") as f:
            f.write(html)
        
        print("‚úÖ Relat√≥rio HTML gerado: report.html")
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio HTML: {str(e)}")

def gerar_relatorios_mensais_html(csv_path):
    """Gera relat√≥rios HTML mensais baseados no arquivo CSV"""
    try:
        # Verifica se o arquivo CSV existe
        if not os.path.exists(csv_path):
            print(f"‚ùå Arquivo {csv_path} n√£o encontrado para gerar relat√≥rios mensais")
            return
        
        print(f"üìÖ Gerando relat√≥rios mensais baseados em {csv_path}...")
        df = pd.read_csv(csv_path)
        
        # Converte DATA para datetime para facilitar agrupamento
        df['DATA_DT'] = pd.to_datetime(df['DATA'], format='%d/%m/%Y', errors='coerce')
        
        # Remove linhas sem data v√°lida
        df = df.dropna(subset=['DATA_DT'])
        
        if len(df) == 0:
            print("‚ö†Ô∏è  Nenhum dado com data v√°lida encontrado")
            return
        
        # Agrupa por ano e m√™s
        df['ANO_MES'] = df['DATA_DT'].dt.to_period('M')
        grupos_mensais = df.groupby('ANO_MES')
        
        nomes_meses = {
            1: 'Janeiro', 2: 'Fevereiro', 3: 'Marco', 4: 'Abril',
            5: 'Maio', 6: 'Junho', 7: 'Julho', 8: 'Agosto',
            9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'
        }
        
        relatorios_gerados = 0
        
        for periodo, dados_mes in grupos_mensais:
            ano = periodo.year
            mes = periodo.month
            nome_mes = nomes_meses[mes]

            # usa todos os registros do m√™s, independentemente de OCR ou valores vazios
            dados_mes = dados_mes[dados_mes['DATA_DT'].dt.month == mes].copy()

            # Nome do arquivo mensal
            nome_arquivo = f"report-{ano}-{mes:02d}-{nome_mes}.html"

            # Faz backup se arquivo j√° existe
            if os.path.exists(nome_arquivo):
                timestamp = pd.Timestamp.now().strftime('%Y%m%d')
                arquivo_backup = f"report-{ano}-{mes:02d}-{nome_mes}-{timestamp}.bak"
                os.rename(nome_arquivo, arquivo_backup)
                print(f"üìÅ Relat√≥rio mensal anterior renomeado para: {arquivo_backup}")

            # Gera HTML para o m√™s
            gerar_html_mensal(dados_mes, nome_arquivo, nome_mes, ano)
            relatorios_gerados += 1
            print(f"‚úÖ Relat√≥rio mensal gerado: {nome_arquivo}")
            
            # Gera relat√≥rio edit√°vel sem impacto na vers√£o padr√£o
            nome_arquivo_edit = f"report-edit-{ano}-{mes:02d}-{nome_mes}.html"
            gerar_html_mensal_editavel(dados_mes, nome_arquivo_edit, nome_mes, ano)
            print(f"‚úÖ Relat√≥rio mensal edit√°vel gerado: {nome_arquivo_edit}")
        
        print(f"üìÖ Total de relat√≥rios mensais gerados: {relatorios_gerados}")
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rios mensais: {str(e)}")

def gerar_html_impressao(df_mes, nome_arquivo, nome_mes, ano):
    """Gera o HTML para um impress√£o"""
    # Gera HTML de impress√£o conforme layout da Justi√ßa (A4, cabe√ßalho, tabela e assinatura)
    html = f"""<!DOCTYPE html>
    <html lang="pt-br">
    <head>
      <meta charset="UTF-8">
      <style>
        @page {{ size: A4 portrait; margin: 2cm; }}
        body {{ font-family: Arial, sans-serif; font-size: 12px; margin: 0; padding: 0; }}
        h1 {{ text-align: center; margin-bottom: 20px; font-size: 18px; }}
        .header-info {{ margin-bottom: 20px; }}
        .header-info span {{ display: inline-block; width: 45%; }}
        table {{ width: 100%; border-collapse: collapse; margin-bottom: 30px; }}
        th, td {{ border: 1px solid #000; padding: 4px; text-align: left; }}
        th {{ background-color: #f0f0f0; }}
        .signature {{ margin-top: 40px; }}
        .signature div {{ display: inline-block; width: 45%; text-align: center; }}
        #download-edits {{ margin: 20px 0; padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }}
        #download-edits:hover {{ background-color: #0056b3; }}
      </style>
    </head>
    <body>
      <h1>Presta√ß√£o de Contas - {nome_mes} {ano}</h1>
      <div class="header-info">
        <span>Curador: ____________________________</span>
        <span>Curatelado: __________________________</span>
      </div>
      <table>
        <thead>
          <tr>
            <th>Data</th>
            <th>Descri√ß√£o</th>
            <th>Receitas (R$)</th>
            <th>Despesas (R$)</th>
            <th>Saldo (R$)</th>
          </tr>
        </thead>
        <tbody>
    """
    # inicializa saldo
    def to_float(v):
        try:
            return float(str(v).replace('.', '').replace(',', '.'))
        except:
            return 0.0
    saldo = 0.0
    for index, row in df_mes.iterrows():
        data = row.get('DATA', '')
        descricao = row.get('DESCRICAO', '')
        valor = to_float(row.get('VALOR', '0'))
        identificador_unico = f"{index}_{data}_{valor}"
        if row.get('CLASSIFICACAO', '').lower() == 'transfer√™ncia':
            receitas = f"{valor:.2f}"
            despesas = ''
            saldo += valor
        else:
            receitas = ''
            despesas = f"{valor:.2f}"
            saldo -= valor
        html += f'      <tr data-id="{identificador_unico}"><td>{data}</td><td data-field="descricao">{descricao}</td><td data-field="receitas">{receitas}</td><td data-field="despesas">{despesas}</td><td data-field="saldo">{saldo:.2f}</td></tr>\n'
    html += """    </tbody>
      </table>
      <button id="download-edits">Salvar</button>
      <div class="signature">
        <div>Local, ___/___/_____<br>Assinatura do Curador</div>
        <div>Data, ___/___/_____<br>Assinatura do Curatelado</div>
      </div>
      <script>
// 1. Carrega edi√ß√µes salvas
const edits = JSON.parse(localStorage.getItem('gastosEdits') || '{}');

// 2. Aplica edi√ß√µes existentes
document.querySelectorAll('tr[data-id]').forEach(tr => {
  const id = tr.dataset.id;
  if (edits[id]) {
    if (edits[id].descricao) tr.querySelector('[data-field="descricao"]').textContent = edits[id].descricao;
    if (edits[id].receitas) tr.querySelector('[data-field="receitas"]').textContent = edits[id].receitas;
    if (edits[id].despesas) tr.querySelector('[data-field="despesas"]').textContent = edits[id].despesas;
    if (edits[id].saldo) tr.querySelector('[data-field="saldo"]').textContent = edits[id].saldo;
  }
});

// 3. Edi√ß√£o inline ao clicar na c√©lula
document.querySelector('tbody').addEventListener('click', event => {
  const td = event.target.closest('td[data-field]');
  if (!td) return;
  const field = td.dataset.field;
  const tr = td.closest('tr');
  const id = tr.dataset.id;
  const input = document.createElement('input');
  input.type = 'text';
  input.value = td.textContent;
  td.textContent = '';
  td.appendChild(input);
  input.focus();
  input.addEventListener('blur', () => saveEdit(id, field, input.value, td));
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') input.blur();
  });
});

function saveEdit(id, field, value, cell) {
  cell.textContent = value;
  edits[id] = edits[id] || {};
  edits[id][field] = value;
  localStorage.setItem('gastosEdits', JSON.stringify(edits));
