      table th:nth-child(2)::after {
        display: none;
      }
      span.classificacao.transferencia::before {
        content: "‚áÜ";
      }
      span.classificacao.pagamento::before {
        content: "üí∏";
      }
      span.classificacao {
        font-size: 0;
        display: inline-block;
        width: 1em;
        height: 1em;
      }
      table th:nth-child(3)::after {
        content: "RI";
      }
      table th:nth-child(4)::after {
        content: "RA";
      }
      table th:nth-child(5)::after {
        content: "üìé";
      }
      table th:nth-child(6), table td:nth-child(6) {
        display: none;
      }
    }
  </style>
</head>
<body>
  <!-- Mensagem de carregamento -->
  <div id="loading-overlay" style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(255,255,255,0.9);display:flex;align-items:center;justify-content:center;z-index:9999;">
    <div style="text-align:center;font-family:sans-serif;">
      <div style="font-size:18px;color:#333;margin-bottom:20px;">Carregando relat√≥rio edit√°vel...</div>
      <div style="width:300px;height:20px;background:#e0e0e0;border-radius:10px;overflow:hidden;margin-bottom:10px;">
        <div id="progress-bar" style="height:100%;background:linear-gradient(90deg,#3498db,#2ecc71);width:0%;transition:width 0.3s ease;border-radius:10px;"></div>
      </div>
      <div id="progress-text" style="font-size:14px;color:#666;">0%</div>
    </div>
  </div>
  <div class="container">
    <h1>Relat√≥rio de Presta√ß√£o de Contas - ''' + f"{nome_mes} {ano}" + ''' (Edit√°vel)</h1>
    <div class="info">
      Gerado automaticamente em ''' + pd.Timestamp.now().strftime('%d/%m/%Y √†s %H:%M:%S') + '''
    </div>
    <!-- Marca a tabela para edi√ß√£o -->
    <table id="tabela-mensal-editavel">
      <thead>
        <tr>
          <th>Data-Hora</th>
          <th><button id="toggle-payments" style="background:none;border:none;cursor:pointer;font-size:16px;" aria-label="Alternar pagamentos"></button></th>
          <th>Ricardo (R$)</th>
          <th>Rafael (R$)</th>
          <th>Anexo</th>
          <th>Descri√ß√£o</th>
        </tr>
      </thead>
      <tbody>
'''

    row_id = 0
    for _, row in df_mes.iterrows():
        row_id += 1
        
        # Constr√≥i data-hora
        data = str(row.get('DATA', ''))
        hora = str(row.get('HORA', ''))
        data_hora = f"{data} {hora}" if data != 'nan' and hora != 'nan' else ''

        # Classifica√ß√£o com estilo
        classificacao = str(row.get('CLASSIFICACAO', ''))
        if classificacao.lower() == 'transfer√™ncia':
            class_css = 'transferencia'
        elif classificacao.lower() == 'pagamento':
            class_css = 'pagamento'
        else:
            class_css = ''

        classificacao_html = f'<span class="classificacao {class_css}">{classificacao}</span>' if classificacao != 'nan' else ''

        # Valores monet√°rios
        ricardo = str(row.get('RICARDO', ''))
        rafael = str(row.get('RAFAEL', ''))
        ricardo_html = f'<span class="valor">{ricardo}</span>' if ricardo != 'nan' and ricardo != '' else ''
        rafael_html = f'<span class="valor">{rafael}</span>' if rafael != 'nan' and rafael != '' else ''

        # Determina se √© linha de total
        remetente = str(row.get('REMETENTE', ''))
        row_class = 'total-row' if 'TOTAL' in remetente.upper() else ''

        # Para linhas de totaliza√ß√£o, n√£o exibe imagem
        if row_class == 'total-row':
            img_html = ''
        else:
            # Imagem do anexo
            anexo = str(row.get('ANEXO', ''))
            img_html = ""
            if anexo != 'nan' and anexo != '' and anexo.lower().endswith(('.jpg', '.jpeg', '.png')):
                # Tenta encontrar a imagem em imgs/ primeiro, depois em input/
                img_path = None
                for diretorio in ['imgs', 'input']:
                    caminho_completo = Path(diretorio) / anexo
                    if caminho_completo.is_file():
                        img_path = caminho_completo
                        break

                if img_path:
                    try:
                        with open(img_path, "rb") as f:
                            encoded = base64.b64encode(f.read()).decode()
                            ext = img_path.suffix.replace(".", "").lower()
                            if ext == 'jpg':
                                ext = 'jpeg'
                            img_html = f'<img src="data:image/{ext};base64,{encoded}" class="thumb" alt="Comprovante {anexo}" title="{anexo}" onclick="showModal(this.src)">'
                    except Exception as e:
                        print(f"Erro ao processar imagem {anexo}: {e}")
                        img_html = f'<span style="color: #e74c3c; font-size: 11px;">Erro: {anexo}</span>'
                else:
                    img_html = f'<span style="color: #f39c12; font-size: 11px;">N√£o encontrado: {anexo}</span>'

        # Descri√ß√£o
        descricao = str(row.get('DESCRICAO', ''))
        descricao_html = descricao if descricao != 'nan' else ''

        html += f'''        <tr class="{row_class}" data-id="row_{row_id}">
          <td class="data-hora">{data_hora}</td>
          <td>{classificacao_html}</td>
          <td data-field="ricardo">{ricardo_html}</td>
          <td data-field="rafael">{rafael_html}</td>
          <td>{img_html}</td>
          <td style="text-align: left; font-size: 12px;" data-field="descricao">{descricao_html}</td>
        </tr>
'''

    html += '''      </tbody>
    </table>
    
    <!-- Bot√£o para download das edi√ß√µes como JSON -->
    <div style="text-align: right; margin: 10px 0;">
      <button id="btn-download-edits" style="padding: 8px 16px; cursor: pointer;">Salvar</button>
    </div>
  </div>

  <div id="modal" class="modal" onclick="hideModal()">
    <img class="modal-content" id="modal-img">
  </div>

  <script>
    function showModal(imgSrc) {
      const modal = document.getElementById('modal');
      const modalImg = document.getElementById('modal-img');
      modalImg.src = imgSrc;
      modal.classList.add('show');
    }
    function hideModal() {
      const modal = document.getElementById('modal');
      modal.classList.remove('show');
    }
    // Toggle payments visibility
    let showPayments = false;
    document.addEventListener('DOMContentLoaded', () => {
      const toggleBtn = document.getElementById('toggle-payments');
      toggleBtn.addEventListener('click', () => {
        showPayments = !showPayments;
        document.querySelectorAll('tbody tr').forEach(row => {
          const isPayment = row.querySelector('td:nth-child(2) .classificacao.pagamento');
          row.style.display = isPayment ? (showPayments ? '' : 'none') : '';
        });
      });
      // Hide payments by default
      document.querySelectorAll('tbody tr').forEach(row => {
        const isPayment = row.querySelector('td:nth-child(2) .classificacao.pagamento');
        if (isPayment) row.style.display = 'none';
      });
    });

    // 1. Carrega edi√ß√µes salvas
    const edits = JSON.parse(localStorage.getItem('edits') || '{}');

    // 2. Evento de clique nas c√©lulas edit√°veis
    document.querySelectorAll('#tabela-mensal-editavel td[data-field]').forEach(cell => {
      cell.addEventListener('click', () => {
        if (cell.querySelector('input')) return;
        const valorAntigo = cell.textContent;
        const input = document.createElement('input');
        input.value = valorAntigo;
        cell.textContent = '';
        cell.appendChild(input);
        input.focus();
        input.addEventListener('blur', () => saveEdit(id, field, input.value, td));
        input.addEventListener('keydown', e => {
          if (e.key === 'Enter') input.blur();
        });
      });
    });

    // Salvar completo com todos os campos (exceto imagem)
    document.getElementById('btn-download-edits').addEventListener('click', () => {
      const table = document.getElementById('tabela-mensal-editavel');
      const data = {};
      table.querySelectorAll('tr[data-id]').forEach(tr => {
        const id = tr.dataset.id;
        data[id] = {};
        tr.querySelectorAll('td[data-field]').forEach(td => {
          data[id][td.dataset.field] = td.textContent.trim();
        });
      });
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `edits-''' + nome_mes.lower() + '''-''' + str(ano) + '''.json`;
      a.click();
      URL.revokeObjectURL(url);
    });
    
    // Simula progresso de carregamento e esconde overlay quando completar
    document.addEventListener('DOMContentLoaded', () => {
      const overlay = document.getElementById('loading-overlay');
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      
      if (overlay && progressBar && progressText) {
        let progress = 0;
        const interval = setInterval(() => {
          progress += Math.random() * 15 + 5; // Incremento aleat√≥rio entre 5-20%
          if (progress >= 100) {
            progress = 100;
            clearInterval(interval);
            setTimeout(() => {
              overlay.style.display = 'none';
            }, 500); // Pequena pausa no 100% antes de esconder
          }
          progressBar.style.width = progress + '%';
          progressText.textContent = Math.round(progress) + '%';
        }, 100); // Atualiza a cada 100ms
      }
    });
  </script>
</body>
</html>'''

    with open(nome_arquivo, "w", encoding="utf-8") as f:
        f.write(html)

def corrigir_totalizadores_duplicados(csv_file):
    """Corrige totalizadores duplicados no arquivo CSV existente"""
    try:
        if not os.path.exists(csv_file):
            print(f"Arquivo {csv_file} n√£o encontrado!")
            return False
            
        print(f"Corrigindo totalizadores duplicados em {csv_file}...")
        df = pd.read_csv(csv_file)
        
        # Aplica a corre√ß√£o usando a fun√ß√£o existente
        df_corrigido = adicionar_totalizacao_mensal(df)
        
        # Salva o arquivo corrigido
        df_corrigido.to_csv(csv_file, index=False, quoting=1)
        
        print(f"‚úÖ Arquivo {csv_file} corrigido com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir totalizadores: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Uso:")
        print("  python app.py processar              # Processamento incremental autom√°tico")
        print("  python app.py verificar <arquivo_csv>")
        print("  python app.py corrigir <arquivo_csv> # Corrige totalizadores duplicados")
        print("  python app.py teste                  # Executa testes E2E completos")
        sys.exit(1)
    
    comando = sys.argv[1]
    
    if comando == "processar":
        # Modo incremental - sem par√¢metros adicionais
        processar_incremental()
        
    elif comando == "verificar":
        if len(sys.argv) != 3:
            print("Uso: python app.py verificar <arquivo_csv>")
            sys.exit(1)
            
        csv_file = sys.argv[2]
        verificar_totais(csv_file)
        
    elif comando == "corrigir":
        if len(sys.argv) != 3:
            print("Uso: python app.py corrigir <arquivo_csv>")
            sys.exit(1)
            
        csv_file = sys.argv[2]
        sucesso = corrigir_totalizadores_duplicados(csv_file)
        sys.exit(0 if sucesso else 1)
