        print("Testando gera√ß√£o de descri√ß√£o...")
        descricao = generate_payment_description_with_chatgpt(texto_teste)
        sucesso_descricao = bool(descricao and descricao != "")
        
        # Testa classifica√ß√£o
        print("Testando classifica√ß√£o...")
        classificacao = classify_transaction_type_with_chatgpt(texto_teste)
        sucesso_classificacao = classificacao in ["Transfer√™ncia", "Pagamento"]
        
        print(f"Valor extra√≠do: {valor}")
        print(f"Descri√ß√£o gerada: {descricao}")
        print(f"Classifica√ß√£o: {classificacao}")
        
        sucesso_geral = sucesso_valor and sucesso_descricao and sucesso_classificacao
        print(f"Fun√ß√µes ChatGPT: {'‚úÖ PASSOU' if sucesso_geral else '‚ùå FALHOU'}")
        return sucesso_geral
        
    except Exception as e:
        print(f"‚ùå Erro no teste de fun√ß√µes ChatGPT: {e}")
        return False

def gerar_relatorio_html(csv_path):
    """Gera um relat√≥rio HTML responsivo baseado no arquivo CSV"""
    try:
        # Verifica se o arquivo CSV existe
        if not os.path.exists(csv_path):
            print(f"‚ùå O relat√≥rio report.html n√£o foi gerado pela aus√™ncia da planilha de c√°lculos ({csv_path})")
            return
        
        # Se report.html j√° existe, renomeia com timestamp antes de gerar novo
        if os.path.exists("report.html"):
            timestamp = pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')
            arquivo_backup = f"report-{timestamp}.bak"
            os.rename("report.html", arquivo_backup)
            print(f"üìÅ Relat√≥rio anterior renomeado para: {arquivo_backup}")
        
        print(f"üìä Gerando novo relat√≥rio HTML baseado em {csv_path}...")
        df = pd.read_csv(csv_path)
        print(f"DEBUG: DataFrame carregado com {len(df)} linhas")
        print(f"DEBUG: Colunas dispon√≠veis: {list(df.columns)}")
        if len(df) > 0:
            print(f"DEBUG: Primeiras 3 linhas de DESCRICAO: {df['DESCRICAO'].head(3).tolist()}")
            print(f"DEBUG: Primeiras 3 linhas de CLASSIFICACAO: {df['CLASSIFICACAO'].head(3).tolist()}")
        
        html = '''<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Relat√≥rio de Presta√ß√£o de Contas</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      margin: 20px; 
      background-color: #f9f9f9;
      line-height: 1.6;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }
    h1 { 
      text-align: center; 
      color: #2c3e50;
      margin-bottom: 30px;
      font-size: 28px;
      border-bottom: 3px solid #3498db;
      padding-bottom: 15px;
    }
    .info {
      text-align: center;
      margin-bottom: 20px;
      color: #7f8c8d;
      font-style: italic;
    }
    table { 
      border-collapse: collapse; 
      width: 100%; 
      margin-top: 20px;
      font-size: 14px;
    }
    th, td { 
      border: 1px solid #ddd; 
      padding: 12px 8px; 
      text-align: center;
      vertical-align: middle;
    }
    th { 
      background-color: #3498db; 
      color: white;
      font-weight: bold;
      text-transform: uppercase;
      font-size: 12px;
    }
    tr:nth-child(even) {
      background-color: #f8f9fa;
    }
    tr:hover {
      background-color: #e3f2fd;
    }
    .total-row {
      background-color: #fff3cd !important;
      font-weight: bold;
      border-top: 3px solid #ffc107;
    }
    .total-row:hover {
      background-color: #fff3cd !important;
    }
    img.thumb { 
      max-height: 50px; 
      max-width: 80px;
      cursor: pointer; 
      transition: transform 0.3s ease;
      border-radius: 5px;
      border: 1px solid #ddd;
    }
    img.thumb:hover { 
      transform: scale(3); 
      z-index: 9999; 
      position: relative;
      border: 2px solid #3498db;
      box-shadow: 0 0 20px rgba(0,0,0,0.5);
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 9999;
      padding-top: 0;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      overflow: auto;
      background-color: rgba(0,0,0,0.95);
    }
    .modal-content {
      margin: auto;
      display: block;
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
    .modal.show {
      display: block;
    }
    .valor {
      font-weight: bold;
      color: #27ae60;
    }
    .data-hora {
      font-family: monospace;
      font-size: 12px;
      white-space: nowrap;
    }
    .classificacao {
      padding: 4px 8px;
      border-radius: 15px;
      font-size: 11px;
      font-weight: bold;
      text-transform: uppercase;
    }
    .transferencia {
      background-color: #e8f5e8;
      color: #2e7d32;
    }
    .pagamento {
      background-color: #fff3e0;
      color: #f57c00;
    }
    @media (max-width: 768px) {
      .container {
        margin: 10px;
        padding: 15px;
      }
      table {
        font-size: 12px;
      }
      th, td {
        padding: 8px 4px;
      }
      h1 {
        font-size: 22px;
      }
      img.thumb {
        max-height: 40px;
        max-width: 60px;
      }
      img.thumb:hover {
        transform: scale(2.5);
      }
      table th:nth-child(1), table td:nth-child(1) {
        font-size: 10px;
        white-space: normal;
        word-break: break-word;
      }
      table th:nth-child(2), table td:nth-child(2) {
        font-size: 0;
        width: 30px;
        position: relative;
      }
      /* Button in th:nth-child(2) - override to icon only and style */
      table th:nth-child(2) button {
        font-size: 0;
        border: none;
        background: none;
        padding: 4px;
        display: block;
        width: 100%;
        height: 100%;
        cursor: pointer;
      }
      table th:nth-child(2) {
        position: relative;
        z-index: 1;
        cursor: pointer;
      }
      /* table th:nth-child(2) button::after {
        content: "üëÅÔ∏è";
        font-size: 14px;
        position: relative;
      } */
      table th:nth-child(2)::after {
        display: none;
      }
      span.classificacao.transferencia::before {
        content: "‚áÜ";
      }
      span.classificacao.pagamento::before {
        content: "üí∏";
      }
      span.classificacao {
        font-size: 0;
        display: inline-block;
        width: 1em;
        height: 1em;
      }
      table th:nth-child(3)::after {
        content: "RI";
      }
      table th:nth-child(4)::after {
        content: "RA";
      }
      table th:nth-child(5)::after {
        content: "üìé";
      }
      table th:nth-child(6), table td:nth-child(6) {
        display: none;
      }
    }
  </style>
</head>
<body>
  <!-- Mensagem de carregamento -->
  <div id="loading-overlay" style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(255,255,255,0.9);display:flex;align-items:center;justify-content:center;z-index:9999;">
    <div style="text-align:center;font-family:sans-serif;">
      <div style="font-size:18px;color:#333;margin-bottom:20px;">Carregando relat√≥rio...</div>
      <div style="width:300px;height:20px;background:#e0e0e0;border-radius:10px;overflow:hidden;margin-bottom:10px;">
        <div id="progress-bar" style="height:100%;background:linear-gradient(90deg,#3498db,#2ecc71);width:0%;transition:width 0.3s ease;border-radius:10px;"></div>
      </div>
      <div id="progress-text" style="font-size:14px;color:#666;">0%</div>
    </div>
  </div>
  <div class="container">
    <h1>Relat√≥rio de Presta√ß√£o de Contas</h1>
    <div class="info">
      Gerado automaticamente em ''' + pd.Timestamp.now().strftime('%d/%m/%Y √†s %H:%M:%S') + '''
    </div>
    <table>
      <thead>
        <tr>
          <th>Data-Hora</th>
          <th><button id="toggle-payments" style="background:none;border:none;cursor:pointer;font-size:16px;" aria-label="Alternar pagamentos"></button></th>
          <th>Ricardo (R$)</th>
          <th>Rafael (R$)</th>
          <th>Anexo</th>
          <th>Descri√ß√£o</th>
        </tr>
      </thead>
      <tbody>
'''

        for _, row in df.iterrows():
            # Constr√≥i data-hora
            data = str(row.get('DATA', ''))
            hora = str(row.get('HORA', ''))
            data_hora = f"{data} {hora}" if data != 'nan' and hora != 'nan' else ''

            # Classifica√ß√£o com estilo
            classificacao = str(row.get('CLASSIFICACAO', ''))
            if classificacao.lower() == 'transfer√™ncia':
                class_css = 'transferencia'
            elif classificacao.lower() == 'pagamento':
                class_css = 'pagamento'
            else:
                class_css = ''

