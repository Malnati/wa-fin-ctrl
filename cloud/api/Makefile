# api/Makefile

.PHONY: help dev test docs docker docker-dev format lint clean install build stack stack-dev stack-stop stack-logs stack-status stack-restart validate-nginx start stop logs

# Vari√°veis
APP_NAME = yagnostic-api
PORT = 3333
DOCKER_IMAGE = $(APP_NAME):latest
NGINX_PORT = 8080
ROOT_COMPOSE = ../docker-compose.yml
COMPOSE_CMD = docker compose -f $(ROOT_COMPOSE)

# Comando padr√£o
help:
	@echo "Comandos dispon√≠veis:"
	@echo "  dev           - Inicia o servidor de desenvolvimento NestJS"
	@echo "  test          - Executa os testes"
	@echo "  docs          - Abre o navegador na rota Swagger"
	@echo "  docker        - Executa a build e sobe o container"
	@echo "  docker-dev    - Executa em modo desenvolvimento"
	@echo "  format        - Executa prettier com padr√£o do projeto"
	@echo "  lint          - Executa ESLint"
	@echo "  clean         - Remove arquivos de build e node_modules"
	@echo "  install       - Instala depend√™ncias"
	@echo "  build         - Compila o projeto"
	@echo "  start         - Inicia o servi√ßo API via docker-compose"
	@echo "  stop          - Para o servi√ßo API"
	@echo "  logs          - Mostra logs do servi√ßo API"
	@echo ""
	@echo "üê≥ Stack Docker com NGINX (Rate Limiting):"
	@echo "  stack         - Inicia o stack completo (NGINX + API)"
	@echo "  stack-dev     - Inicia o stack em modo desenvolvimento"
	@echo "  stack-stop    - Para o stack completo"
	@echo "  stack-logs    - Mostra logs do stack"
	@echo "  stack-status  - Status dos servi√ßos"
	@echo "  stack-restart - Reinicia o stack completo"
	@echo "  validate-nginx- Valida configura√ß√µes do NGINX"

# Desenvolvimento local
dev:
	@echo "üîß Iniciando desenvolvimento NestJS..."
	npm run start:dev

# Testes
test:
	npm run test

# Documenta√ß√£o Swagger
docs:
	open http://localhost:3333/docs

# Docker produ√ß√£o
docker:
	$(COMPOSE_CMD) up --build --watch

# Docker desenvolvimento
docker-dev:
	@echo "üê≥ Iniciando container de desenvolvimento..."
	$(COMPOSE_CMD) --profile dev up --build -d api-dev
	@echo "‚úÖ Container de desenvolvimento iniciado! Acesse: http://localhost:$(PORT)"

# Build do projeto
build:
	npm run build
	@echo "‚úÖ Build conclu√≠do!"

# Comando para desenvolvimento completo
dev-setup: install format lint test
	@echo "‚úÖ Setup de desenvolvimento conclu√≠do!"

# Comando para verificar status
status:
	@echo "üìä Status do projeto:"
	@echo "  - Porta: $(PORT)"
	@echo "  - Nome: $(APP_NAME)"
	@echo "  - Docker: $(DOCKER_IMAGE)"
	@if docker ps | grep -q $(APP_NAME); then \
		echo "  - Container: ‚úÖ Rodando"; \
	else \
		echo "  - Container: ‚ùå Parado"; \
	fi

# Docker orchestration targets (AGENTS.md compliance)
start:
	$(COMPOSE_CMD) up -d api

stop:
	$(COMPOSE_CMD) stop api

logs:
	$(COMPOSE_CMD) logs -f api

clean:
	@echo "üßπ Limpando artefatos..."
	rm -rf dist/
	rm -rf node_modules/.cache
	$(COMPOSE_CMD) down -v --rmi local --remove-orphans
	@echo "‚úÖ Limpeza conclu√≠da!" 
