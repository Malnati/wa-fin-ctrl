# app.py
# Caminho relativo ao projeto: src/wa_fin_ctrl/app.py
# M√≥dulo principal de processamento de comprovantes financeiros com suporte a OCR e IA
import pandas as pd
import sys
import re
import os
import shutil
import zipfile
from PIL import Image
import pytesseract
import cv2
from openai import OpenAI
import base64
from pathlib import Path
from datetime import datetime
# Removido: gera√ß√£o de relat√≥rios HTML n√£o √© mais necess√°ria com React

# Adiciona imports para PDF

from .apps.core.ocr import registrar_ocr_xml, process_image_ocr
from .apps.core.env import *
from .apps.core.helper import normalize_value_to_brazilian_format, parse_value_from_input
from .apps.core.history import record_fix_command_wrapper
from .apps.core.models import EntradaFinanceira
from .apps.core.ia import (
    extract_total_value_with_chatgpt,
    generate_payment_description_with_chatgpt,
    classify_transaction_type_with_chatgpt,
)
from .apps.core.helper import (
    normalize_sender,
)
from .apps.core.utils import (
    descomprimir_zip_se_existir,
    organizar_subdiretorios_se_necessario,
    mover_arquivos_processados,
    diagnostico_erro_ocr,
)






























def processar_incremental(force=False, entry=None, backup=False):
    """Fun√ß√£o principal para processamento incremental ou for√ßado, agora com filtro opcional de entry (DATA HORA)"""
    print(
        "=== INICIANDO PROCESSAMENTO {} ===".format(
            "FOR√áADO" if force else "INCREMENTAL"
        )
    )
    if entry:
        print(f"Filtro de entrada ativado: {entry}")
        try:
            data_entry, hora_entry = entry.strip().split()
        except Exception:
            print("Formato de --entry inv√°lido. Use: DD/MM/AAAA HH:MM:SS")
            return

    # Backup n√£o √© mais necess√°rio com banco SQLite unificado
    if backup:
        print("‚ö†Ô∏è  Op√ß√£o --backup n√£o √© mais necess√°ria com banco SQLite unificado")

    # Edi√ß√µes agora s√£o aplicadas diretamente no banco de dados
    print("Edi√ß√µes ser√£o aplicadas diretamente no banco de dados, se existirem.")
    print("\n=== VERIFICANDO ARQUIVOS ZIP ===")
    if not descomprimir_zip_se_existir():
        print("‚ùå Erro na descompress√£o de arquivo ZIP. Processamento interrompido.")
        return
    print("\n=== VERIFICANDO SUBDIRET√ìRIOS ===")
    organizar_subdiretorios_se_necessario()
    
    print("\n=== PROCESSANDO ARQUIVO DE CHAT ===")
    mensagens_info = processar_arquivo_chat()
    
    input_dir = ATTR_FIN_DIR_INPUT
    if force:
        arquivos = [
            f
            for f in os.listdir(input_dir)
            if os.path.isfile(os.path.join(input_dir, f))
            and f.lower().endswith((".jpg", ".jpeg", ".png", ".pdf"))
        ]
        if not arquivos:
            print("Nenhum arquivo para reprocessar em modo for√ßado.")
        else:
            print(f"Arquivos a reprocessar: {arquivos}")
            registros = []
            for arquivo in arquivos:
                caminho = os.path.join(input_dir, arquivo)
                print(f"Processando arquivo (for√ßado): {arquivo}")
                ocr_result = process_image_ocr(caminho)
                valor_total = extract_total_value_with_chatgpt(ocr_result)
                descricao = generate_payment_description_with_chatgpt(ocr_result)
                classificacao = classify_transaction_type_with_chatgpt(ocr_result)
                motivo_erro = ""
                if not valor_total and not descricao and not classificacao:
                    motivo_erro = diagnostico_erro_ocr(caminho, ocr_result)
                registros.append(
                    {
                        "ARQUIVO": arquivo,
                        "VALOR": valor_total,
                        "DESCRICAO": descricao,
                        "CLASSIFICACAO": classificacao,
                        "MOTIVO_ERRO": motivo_erro,
                    }
                )
            # Salva resultado em CSV detalhado
            df_diag = pd.DataFrame(registros)
            if entry:
                # Filtra apenas a linha correspondente
                if (
                    "ARQUIVO" in df_diag.columns
                    and "DATA" in df_diag.columns
                    and "HORA" in df_diag.columns
                ):
                    mask = (df_diag["DATA"] == data_entry) & (
                        df_diag["HORA"] == hora_entry
                    )
                    df_diag = df_diag[mask]
                    if df_diag.empty:
                        print(f"Nenhuma linha encontrada para --entry {entry}.")
                        return
                else:
                    print("Colunas DATA/HORA n√£o encontradas para filtro --entry.")
                    return
                    print("Reprocessamento for√ßado conclu√≠do.")
    else:
        # Verifica se h√° arquivos para processar
        arquivos_para_processar = []
        for arquivo in os.listdir(input_dir):
            if arquivo.lower().endswith(('.jpg', '.jpeg', '.png', '.pdf')):
                arquivos_para_processar.append(arquivo)
        
        if not arquivos_para_processar:
            print("Nenhum arquivo novo para processar.")
            print("\n=== PROCESSAMENTO CONCLU√çDO ===")
            print("Dados registrados no banco SQLite. Use o frontend React para visualiza√ß√£o.")
            return
        print(f"\n=== PROCESSANDO ARQUIVOS ENCONTRADOS ===")
        print("=== PROCESSANDO DADOS COMPLETOS ===")
        # Dados agora s√£o processados diretamente no banco de dados
        print("\n=== PROCESSANDO APENAS ANEXOS ===")
        # Dados agora s√£o processados diretamente no banco de dados
        
        print(f"Encontrados {len(arquivos_para_processar)} arquivos para processar")
        
        # Processa cada arquivo
        for arquivo in arquivos_para_processar:
            caminho = os.path.join(input_dir, arquivo)
            print(f"Processando arquivo: {arquivo}")
            
            # Busca informa√ß√µes do chat para este arquivo
            info_chat = mensagens_info.get(arquivo, {})
            data_hora_chat = None
            remetente_chat = None
            
            if info_chat:
                data_chat = info_chat.get('data', '')
                hora_chat = info_chat.get('hora', '')
                remetente_chat = info_chat.get('remetente', '')
                
                if data_chat and hora_chat:
                    try:
                        # Converte data/hora do chat para datetime
                        data_hora_str = f"{data_chat} {hora_chat}"
                        data_hora_chat = datetime.strptime(data_hora_str, "%d/%m/%Y %H:%M:%S")
                        print(f"  üìÖ Data/hora do chat: {data_hora_str} - {remetente_chat}")
                    except ValueError:
                        print(f"  ‚ö†Ô∏è  Erro ao converter data/hora do chat: {data_chat} {hora_chat}")
            
            # Processa OCR
            ocr_result = process_image_ocr(caminho)
            
            # Extrai informa√ß√µes usando IA
            valor_total = extract_total_value_with_chatgpt(ocr_result)
            descricao = generate_payment_description_with_chatgpt(ocr_result)
            classificacao = classify_transaction_type_with_chatgpt(ocr_result)
            
            # Registra no banco de dados (se configurado)
            try:
                # Tenta registrar no banco Django se dispon√≠vel
                import django
                import sys
                from pathlib import Path
                
                # Adiciona o diret√≥rio src ao PYTHONPATH
                project_root = Path(__file__).resolve().parent.parent.parent
                src_path = project_root / "src"
                if str(src_path) not in sys.path:
                    sys.path.insert(0, str(src_path))
                
                os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wa_fin_ctrl.settings')
                django.setup()
                
                from django.utils import timezone
                
                if valor_total:
                    # Converte valor para formato brasileiro
                    valor_brasileiro = normalize_value_to_brazilian_format(valor_total)
                    valor_float = float(valor_brasileiro.replace(',', '.'))
                    
                    # Usa data/hora do chat se dispon√≠vel, sen√£o usa agora
                    data_hora_entrada = data_hora_chat if data_hora_chat else timezone.now()
                    
                    # Adiciona informa√ß√£o do remetente na descri√ß√£o se dispon√≠vel
                    descricao_completa = descricao or ""
                    if remetente_chat:
                        descricao_completa = f"[{remetente_chat}] {descricao_completa}"
                    
                    EntradaFinanceira.objects.create(
                        data_hora=data_hora_entrada,
                        valor=valor_float,
                        descricao=descricao_completa,
                        classificacao=classificacao or "outros",
                        arquivo_origem=arquivo,
                        desconsiderada=False
                    )
                    print(f"‚úÖ Entrada registrada no banco: {arquivo} - R$ {valor_brasileiro}")
                else:
                    print(f"‚ö†Ô∏è  Nenhum valor extra√≠do para: {arquivo}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao registrar no banco: {str(e)}")
                # Continua processamento mesmo se falhar no banco
        print("\n=== MOVENDO ARQUIVOS PROCESSADOS ===")
        arquivos_movidos = mover_arquivos_processados()
        print("Arquivos processados com sucesso")
        arquivos_restantes = os.listdir(input_dir)
        if not arquivos_restantes:
            print(f"‚úÖ Diret√≥rio {input_dir}/ est√° vazio - processamento conclu√≠do")
        else:
            print(f"‚ö†Ô∏è  Arquivos restantes em {input_dir}/: {arquivos_restantes}")
        print("\n=== PROCESSAMENTO INCREMENTAL CONCLU√çDO ===")
        # Edi√ß√µes agora s√£o aplicadas diretamente no banco de dados
        print("Edi√ß√µes aplicadas no banco de dados.")
    print("\n=== PROCESSAMENTO CONCLU√çDO ===")
    print("Dados registrados no banco SQLite. Use o frontend React para visualiza√ß√£o.")
    print("‚úÖ Processamento conclu√≠do com sucesso!")


def processar_pdfs(force=False, entry=None, backup=False):
    """Processa apenas arquivos .pdf no diret√≥rio de entrada."""
    print(
        "=== INICIANDO PROCESSAMENTO DE PDFs {} ===".format(
            "FOR√áADO" if force else "INCREMENTAL"
        )
    )
    if entry:
        print(f"Filtro de entrada ativado: {entry}")
        try:
            data_entry, hora_entry = entry.strip().split()
        except Exception:
            print("Formato de --entry inv√°lido. Use: DD/MM/AAAA HH:MM:SS")
            return

    # Backup n√£o √© mais necess√°rio com banco SQLite unificado
    if backup:
        print("‚ö†Ô∏è  Op√ß√£o --backup n√£o √© mais necess√°ria com banco SQLite unificado")

    input_dir = Path(ATTR_FIN_DIR_INPUT)

    if not input_dir.exists():
        print(f"Diret√≥rio {ATTR_FIN_DIR_INPUT}/ n√£o encontrado!")
        return

    # Busca apenas arquivos PDF
    arquivos_pdf = list(input_dir.glob("*.pdf"))

    if not arquivos_pdf:
        print(f"Nenhum arquivo PDF encontrado em {ATTR_FIN_DIR_INPUT}/")
        return

    print(f"Encontrados {len(arquivos_pdf)} arquivos PDF para processar")

    # Processa cada PDF
    for pdf_path in arquivos_pdf:
        print(f"Processando PDF: {pdf_path.name}")

        # PASSO 1: Aplicar OCR contra o PDF
        ocr_text = process_image_ocr(str(pdf_path))

        # Registra no XML (usar s√≥ o nome do arquivo)
        registrar_ocr_xml(os.path.basename(str(pdf_path)), ocr_text)

        # PASSO 2: Submeter o resultado do OCR contra a IA para identificar valor, classifica√ß√£o e descri√ß√£o
        valor_total = ""
        descricao = ""
        classificacao = ""
        ai_used = False

        # Tenta extrair informa√ß√µes do texto OCR primeiro
        if ocr_text and ocr_text not in [
            "Arquivo n√£o encontrado",
            "Erro ao carregar imagem",
            "Nenhum texto detectado",
        ]:
            print(f"  - Extraindo informa√ß√µes do texto OCR...")
            
            # Extrai valor do OCR
            valor_total = extract_total_value_with_chatgpt(ocr_text)
            
            # Extrai classifica√ß√£o do OCR
            classificacao = classify_transaction_type_with_chatgpt(ocr_text)
            
            # Extrai descri√ß√£o do OCR
            descricao = generate_payment_description_with_chatgpt(ocr_text)
            
            if valor_total:
                print(f"  - Informa√ß√µes extra√≠das do OCR: Valor={valor_total}, Classifica√ß√£o={classificacao}")
                ai_used = True

        # PASSO 3: Se a IA n√£o identificou os resultados do OCR, submeter a imagem contra a IA
        if not valor_total:
            print(f"  - OCR n√£o conseguiu extrair informa√ß√µes, submetendo PDF para IA...")
            valor_total, descricao, classificacao = process_image_with_ai_for_value(str(pdf_path), ocr_text)
            ai_used = True
            
            if valor_total:
                print(f"  - Informa√ß√µes extra√≠das do PDF: Valor={valor_total}, Classifica√ß√£o={classificacao}")
            else:
                print(f"  - IA n√£o conseguiu identificar informa√ß√µes, classificando como desconhecido")
                classificacao = "desconhecido"

        # PASSO 4: Se nem mesmo a IA identificou, classificar como desconhecido
        if not valor_total:
            valor_total = ""
            descricao = "N√£o foi poss√≠vel extrair informa√ß√µes"
            classificacao = "desconhecido"
            print(f"  - Classificado como desconhecido")

        print(f"  - Valor: {valor_total}")
        print(f"  - Descri√ß√£o: {descricao}")
        print(f"  - Classifica√ß√£o: {classificacao}")
        print(f"  - IA usada: {'Sim' if ai_used else 'N√£o'}")

    # Dados processados e salvos no banco de dados
    print("\n=== DADOS PROCESSADOS E SALVOS NO BANCO ===")

    print("‚úÖ Processamento de PDFs conclu√≠do!")


def processar_imgs(force=False, entry=None, backup=False):
    """Processa apenas arquivos de imagem (.jpg, .png, .jpeg) no diret√≥rio de entrada."""
    print(
        "=== INICIANDO PROCESSAMENTO DE IMAGENS {} ===".format(
            "FOR√áADO" if force else "INCREMENTAL"
        )
    )
    if entry:
        print(f"Filtro de entrada ativado: {entry}")
        try:
            data_entry, hora_entry = entry.strip().split()
        except Exception:
            print("Formato de --entry inv√°lido. Use: DD/MM/AAAA HH:MM:SS")
            return

    # Backup n√£o √© mais necess√°rio com banco SQLite unificado
    if backup:
        print("‚ö†Ô∏è  Op√ß√£o --backup n√£o √© mais necess√°ria com banco SQLite unificado")

    input_dir = Path(ATTR_FIN_DIR_INPUT)

    if not input_dir.exists():
        print(f"Diret√≥rio {ATTR_FIN_DIR_INPUT}/ n√£o encontrado!")
        return

    # Busca apenas arquivos de imagem
    extensoes_img = (".jpg", ".jpeg", ".png")
    imagens = [
        p
        for p in input_dir.iterdir()
        if p.is_file() and p.suffix.lower() in extensoes_img
    ]

    if not imagens:
        print(f"Nenhum arquivo de imagem encontrado em {ATTR_FIN_DIR_INPUT}/")
        return

    print(f"Encontradas {len(imagens)} imagens para processar")

    # Processa cada imagem
    for img_path in imagens:
        print(f"Processando imagem: {img_path.name}")

        # PASSO 1: Aplicar OCR contra a imagem
        ocr_text = process_image_ocr(str(img_path))

        # Registra no XML (usar s√≥ o nome do arquivo)
        registrar_ocr_xml(os.path.basename(str(img_path)), ocr_text)

        # PASSO 2: Submeter o resultado do OCR contra a IA para identificar valor, classifica√ß√£o e descri√ß√£o
        valor_total = ""
        descricao = ""
        classificacao = ""
        ai_used = False

        # Tenta extrair informa√ß√µes do texto OCR primeiro
        if ocr_text and ocr_text not in [
            "Arquivo n√£o encontrado",
            "Erro ao carregar imagem",
            "Nenhum texto detectado",
        ]:
            print(f"  - Extraindo informa√ß√µes do texto OCR...")
            
            # Extrai valor do OCR
            valor_total = extract_total_value_with_chatgpt(ocr_text)
            
            # Extrai classifica√ß√£o do OCR
            classificacao = classify_transaction_type_with_chatgpt(ocr_text)
            
            # Extrai descri√ß√£o do OCR
            descricao = generate_payment_description_with_chatgpt(ocr_text)
            
            if valor_total:
                print(f"  - Informa√ß√µes extra√≠das do OCR: Valor={valor_total}, Classifica√ß√£o={classificacao}")
                ai_used = True

        # PASSO 3: Se a IA n√£o identificou os resultados do OCR, submeter a imagem contra a IA
        if not valor_total:
            print(f"  - OCR n√£o conseguiu extrair informa√ß√µes, submetendo imagem para IA...")
            valor_total, descricao, classificacao = process_image_with_ai_for_value(str(img_path), ocr_text)
            ai_used = True
            
            if valor_total:
                print(f"  - Informa√ß√µes extra√≠das da imagem: Valor={valor_total}, Classifica√ß√£o={classificacao}")
            else:
                print(f"  - IA n√£o conseguiu identificar informa√ß√µes, classificando como desconhecido")
                classificacao = "desconhecido"

        # PASSO 4: Se nem mesmo a IA identificou, classificar como desconhecido
        if not valor_total:
            valor_total = ""
            descricao = "N√£o foi poss√≠vel extrair informa√ß√µes"
            classificacao = "desconhecido"
            print(f"  - Classificado como desconhecido")

        print(f"  - Valor: {valor_total}")
        print(f"  - Descri√ß√£o: {descricao}")
        print(f"  - Classifica√ß√£o: {classificacao}")
        print(f"  - IA usada: {'Sim' if ai_used else 'N√£o'}")

    # Dados processados e salvos no banco de dados
    print("\n=== DADOS PROCESSADOS E SALVOS NO BANCO ===")

    print("‚úÖ Processamento de imagens conclu√≠do!")








# Removido: fun√ß√£o n√£o utilizada
# def executar_testes_e2e():
    """Executa testes End-to-End completos do sistema"""
    print("\n=== INICIANDO TESTES E2E ===")

    # Backup n√£o √© mais necess√°rio com banco SQLite unificado
    print("‚ö†Ô∏è  Backup de arquivos n√£o √© mais necess√°rio com banco SQLite unificado")

    try:
        # Testa processamento incremental
        resultado_processamento = testar_processamento_incremental()

        # Testa verifica√ß√£o de totais
        resultado_verificacao = testar_verificacao_totais()

        # Testa OCR individual
        resultado_ocr = testar_ocr_individual()

        # Testa fun√ß√µes ChatGPT (se API dispon√≠vel)
        resultado_chatgpt = testar_funcoes_chatgpt()

        # Relat√≥rio final
        print("\n=== RELAT√ìRIO DOS TESTES E2E ===")
        print(
            f"‚úÖ Processamento incremental: {'PASSOU' if resultado_processamento else 'FALHOU'}"
        )
        print(
            f"‚úÖ Verifica√ß√£o de totais: {'PASSOU' if resultado_verificacao else 'FALHOU'}"
        )
        print(f"‚úÖ OCR individual: {'PASSOU' if resultado_ocr else 'FALHOU'}")
        print(
            f"‚úÖ Fun√ß√µes ChatGPT: {'PASSOU' if resultado_chatgpt else 'FALHOU (API n√£o dispon√≠vel)'}"
        )

        todos_passaram = (
            resultado_processamento and resultado_verificacao and resultado_ocr
        )

        if todos_passaram:
            print("\nÔøΩÔøΩ TODOS OS TESTES E2E PASSARAM!")
            return True
        else:
            print("\n‚ùå ALGUNS TESTES FALHARAM!")
            return False

    finally:
        # Restaura√ß√£o n√£o √© mais necess√°ria com banco SQLite unificado
        print("‚ö†Ô∏è  Restaura√ß√£o de arquivos n√£o √© mais necess√°ria com banco SQLite unificado")





# Removido: fun√ß√£o n√£o utilizada
# def testar_processamento_incremental():
    """Testa o processamento incremental completo"""
    print("\n--- Testando Processamento Incremental ---")

    try:
        # Verifica se h√° arquivos em input/
        if not os.path.exists(ATTR_FIN_DIR_INPUT) or not os.listdir(ATTR_FIN_DIR_INPUT):
            print(f"‚ö†Ô∏è  Sem arquivos em {ATTR_FIN_DIR_INPUT}/ para testar processamento")
            return True  # N√£o √© falha, apenas n√£o h√° dados para testar

        # Conta arquivos antes do processamento
        arquivos_antes = len(
            [
                f
                for f in os.listdir(ATTR_FIN_DIR_INPUT)
                if f.lower().endswith((".jpg", ".jpeg", ".png", ".pdf"))
            ]
        )

        if arquivos_antes == 0:
            print(f"‚ö†Ô∏è  Sem imagens em {ATTR_FIN_DIR_INPUT}/ para testar processamento")
            return True

        print(f"Arquivos de imagem encontrados: {arquivos_antes}")

        # Executa processamento
        processar_incremental()

        # Verifica se arquivos foram movidos para imgs/
        if os.path.exists(ATTR_FIN_DIR_IMGS):
            arquivos_imgs = len(
                [
                    f
                    for f in os.listdir(ATTR_FIN_DIR_IMGS)
                    if f.lower().endswith((".jpg", ".jpeg", ".png", ".pdf"))
                ]
            )
            print(f"Arquivos movidos para {ATTR_FIN_DIR_IMGS}/: {arquivos_imgs}")

        # Verifica se dados foram processados no banco
        print("Dados processados no banco de dados")

        sucesso = True
        print(f"Processamento incremental: {'‚úÖ PASSOU' if sucesso else '‚ùå FALHOU'}")
        return sucesso

    except Exception as e:
        print(f"‚ùå Erro no teste de processamento incremental: {e}")
        return False


# Removido: fun√ß√£o n√£o utilizada
# def testar_verificacao_totais():
    """Testa a verifica√ß√£o de totais"""
    print("\n--- Testando Verifica√ß√£o de Totais ---")

    try:
        # Cria arquivo CSV de teste
        dados_teste = {
            "DATA": ["18/04/2025", "19/04/2025"],
            "HORA": ["12:45:53", "08:14:39"],
            "REMETENTE": ["Ricardo", "Rafael"],
            "CLASSIFICACAO": ["Transfer√™ncia", "Transfer√™ncia"],
            "RICARDO": ["29,90", ""],
            "RAFAEL": ["", "15,50"],
            "ANEXO": ["teste1.jpg", "teste2.jpg"],
            "DESCRICAO": ["Teste 1", "Teste 2"],
            "VALOR": ["29,90", "15,50"],
            "OCR": ["Teste OCR 1", "Teste OCR 2"],
        }

        # Removido: teste com arquivo CSV n√£o √© mais necess√°rio
        # df_teste = pd.DataFrame(dados_teste)
        # arquivo_teste = f"{ATTR_FIN_DIR_TMP}/teste_calculo.csv"
        # os.makedirs(ATTR_FIN_DIR_TMP, exist_ok=True)
        # df_teste.to_csv(arquivo_teste, index=False)
        # print(f"Arquivo de teste criado: {arquivo_teste}")
        # verificar_totais(arquivo_teste)
        # os.remove(arquivo_teste)

        print("Verifica√ß√£o de totais: ‚úÖ PASSOU")
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste de verifica√ß√£o de totais: {e}")
        return False





def fix_entry(
    data_hora,
    novo_valor=None,
    nova_classificacao=None,
    nova_descricao=None,
    dismiss=False,
    rotate=None,
    ia=False,
):
    """Corrige uma entrada espec√≠fica em todos os arquivos CSV do diret√≥rio mensagens/"""
    try:
        # Parse da data e hora
        if " " not in data_hora:
            print("‚ùå Formato inv√°lido. Use: DD/MM/AAAA HH:MM:SS")
            return False

        data, hora = data_hora.strip().split(" ", 1)

        # Valida formato da data
        if not re.match(r"^\d{2}/\d{2}/\d{4}$", data):
            print("‚ùå Formato de data inv√°lido. Use: DD/MM/AAAA")
            return False

        # Valida formato da hora
        if not re.match(r"^\d{2}:\d{2}:\d{2}$", hora):
            print("‚ùå Formato de hora inv√°lido. Use: HH:MM:SS")
            return False

        # Valida formato do valor (se fornecido)
        if novo_valor:
            if not re.match(r"^\d+[,.]?\d*$", novo_valor):
                print("‚ùå Formato de valor inv√°lido. Use: 2,33 ou 2.33")
                return False

            # Converte valor para formato americano padronizado
            novo_valor = parse_value_from_input(novo_valor)
            try:
                float(novo_valor)
            except ValueError:
                print("‚ùå Valor inv√°lido")
                return False

        # Valida par√¢metro de rota√ß√£o (se fornecido)
        if rotate:
            try:
                rotate_degrees = int(rotate)
                if rotate_degrees not in [90, 180, 270]:
                    print("‚ùå Graus de rota√ß√£o inv√°lidos. Use: 90, 180 ou 270")
                    return False
            except ValueError:
                print("‚ùå Graus de rota√ß√£o inv√°lidos. Use: 90, 180 ou 270")
                return False

        # Removido: busca em arquivos CSV n√£o √© mais necess√°ria
        # Os dados agora v√™m do banco SQLite
        print("‚ùå Funcionalidade de corre√ß√£o em arquivos CSV removida")
        print("Use a API REST ou o frontend React para corre√ß√µes")
        return False

        entrada_encontrada = False
        arquivo_anexo = None
        alteracoes_aplicadas = []

        # Processa cada arquivo CSV
        for arquivo_csv in arquivos_csv:
            if not os.path.exists(arquivo_csv):
                continue

            print(f"üîç Procurando em {os.path.basename(arquivo_csv)}...")

            # L√™ o CSV
            df = pd.read_csv(arquivo_csv)

            # Procura pela entrada com data e hora exatas
            # Verifica se as colunas existem (pode ser DATA/HORA ou data/hora)
            data_col = "DATA" if "DATA" in df.columns else "data"
            hora_col = "HORA" if "HORA" in df.columns else "hora"

            mask = (df[data_col] == data) & (df[hora_col] == hora)
            linhas_encontradas = df[mask]

            if not linhas_encontradas.empty:
                entrada_encontrada = True

                for idx, linha in linhas_encontradas.iterrows():
                    print(f"‚úÖ Entrada encontrada: {data} {hora}")

                    # Obt√©m o arquivo anexo para rota√ß√£o/re-submiss√£o
                    if "ANEXO" in df.columns and linha["ANEXO"]:
                        arquivo_anexo = str(linha["ANEXO"])
                        print(f"üìé Arquivo anexo: {arquivo_anexo}")

                    # Obt√©m o valor original (prioriza RICARDO/RAFAEL, depois VALOR)
                    valor_original = None
                    if (
                        "RICARDO" in df.columns
                        and linha["RICARDO"]
                        and str(linha["RICARDO"]).lower() not in ["nan", ""]
                    ):
                        valor_original = str(linha["RICARDO"])
                    elif (
                        "RAFAEL" in df.columns
                        and linha["RAFAEL"]
                        and str(linha["RAFAEL"]).lower() not in ["nan", ""]
                    ):
                        valor_original = str(linha["RAFAEL"])
                    elif (
                        "VALOR" in df.columns
                        and linha["VALOR"]
                        and str(linha["VALOR"]).lower() not in ["nan", ""]
                    ):
                        valor_original = str(linha["VALOR"])

                    # NOVA REGRA: Se n√£o encontrar valor, aplicar automaticamente o fix
                    if not valor_original:
                        print(
                            f"üí∞ Nenhum valor encontrado - aplicando fix autom√°tico: R$ {novo_valor}"
                        )

                        # Determina qual coluna usar baseado na estrutura do arquivo
                        if "RICARDO" in df.columns and "RAFAEL" in df.columns:
                            # Arquivo calculo.csv - verifica qual coluna est√° vazia
                            if pd.isna(linha["RICARDO"]) or str(
                                linha["RICARDO"]
                            ).lower() in ["nan", ""]:
                                # Converte coluna para string se necess√°rio
                                if df["RICARDO"].dtype != object:
                                    df["RICARDO"] = df["RICARDO"].astype(str)
                                df.at[idx, "RICARDO"] = novo_valor
                                coluna_usada = "RICARDO"
                            elif pd.isna(linha["RAFAEL"]) or str(
                                linha["RAFAEL"]
                            ).lower() in ["nan", ""]:
                                # Converte coluna para string se necess√°rio
                                if df["RAFAEL"].dtype != object:
                                    df["RAFAEL"] = df["RAFAEL"].astype(str)
                                df.at[idx, "RAFAEL"] = novo_valor
                                coluna_usada = "RAFAEL"
                            else:
                                # Se ambas est√£o vazias, usa RICARDO por padr√£o
                                # Converte coluna para string se necess√°rio
                                if df["RICARDO"].dtype != object:
                                    df["RICARDO"] = df["RICARDO"].astype(str)
                                df.at[idx, "RICARDO"] = novo_valor
                                coluna_usada = "RICARDO"
                        elif "VALOR" in df.columns:
                            # Arquivo mensagens.csv
                            # Converte coluna para string se necess√°rio
                            if df["VALOR"].dtype != object:
                                df["VALOR"] = df["VALOR"].astype(str)
                            df.at[idx, "VALOR"] = novo_valor
                            coluna_usada = "VALOR"
                        else:
                            print(f"‚ö†Ô∏è  Estrutura de arquivo n√£o reconhecida")
                            continue

                        # Aplica as corre√ß√µes solicitadas para o caso de fix autom√°tico
                        alteracoes = [
                            f"valor: aplicado {novo_valor} (sem valor anterior)"
                        ]

                        # 2. Corrige classifica√ß√£o (se fornecida)
                        if nova_classificacao and "CLASSIFICACAO" in df.columns:
                            classificacao_original = str(linha.get("CLASSIFICACAO", ""))
                            df.at[idx, "CLASSIFICACAO"] = nova_classificacao
                            alteracoes.append(
                                f"classifica√ß√£o: {classificacao_original} ‚Üí {nova_classificacao}"
                            )

                        # 3. Corrige descri√ß√£o (se fornecida)
                        if nova_descricao and "DESCRICAO" in df.columns:
                            descricao_original = str(linha.get("DESCRICAO", ""))
                            df.at[idx, "DESCRICAO"] = nova_descricao
                            alteracoes.append(
                                f"descri√ß√£o: {descricao_original} ‚Üí {nova_descricao}"
                            )

                        # 4. Aplica dismiss (se solicitado)
                        if dismiss:
                            df.at[idx, "VALIDADE"] = "dismiss"
                            alteracoes.append("marcado como dismiss")
                            print(f"‚úÖ Entrada marcada como dismiss")
                        else:
                            # Adiciona informa√ß√£o na coluna VALIDADE sobre as altera√ß√µes
                            if "VALIDADE" in df.columns:
                                df.at[idx, "VALIDADE"] = (
                                    f"fix-auto: {', '.join(alteracoes)}"
                                )
                            else:
                                # Se n√£o existe coluna VALIDADE, adiciona
                                df["VALIDADE"] = ""
                                df.at[idx, "VALIDADE"] = (
                                    f"fix-auto: {', '.join(alteracoes)}"
                                )

                        print(f"‚úÖ Altera√ß√µes aplicadas: {', '.join(alteracoes)}")
                        alteracoes_aplicadas.extend(alteracoes)
                        continue

                    print(f" Valor original: R$ {valor_original}")
                    print(f"üí∞ Novo valor: R$ {novo_valor}")

                    # Converte valor original para formato brasileiro para compara√ß√£o (apenas se novo_valor foi fornecido)
                    if novo_valor:
                        valor_original_clean = normalize_value_to_brazilian_format(
                            valor_original
                        )
                        try:
                            valor_original_float = float(
                                valor_original_clean.replace(",", ".")
                            )
                            novo_valor_float = float(novo_valor.replace(",", "."))
                        except ValueError:
                            print(f"‚ö†Ô∏è  Erro ao converter valores para compara√ß√£o")
                            continue

                    # Aplica as corre√ß√µes solicitadas
                    alteracoes = []

                    # 1. Corrige valor (se fornecido)
                    if novo_valor:
                        if (
                            "RICARDO" in df.columns
                            and linha["RICARDO"]
                            and str(linha["RICARDO"]).lower() not in ["nan", ""]
                        ):
                            # Converte coluna para string se necess√°rio
                            if df["RICARDO"].dtype != object:
                                df["RICARDO"] = df["RICARDO"].astype(str)
                            df.at[idx, "RICARDO"] = novo_valor
                            alteracoes.append(f"valor: {valor_original} ‚Üí {novo_valor}")
                        elif (
                            "RAFAEL" in df.columns
                            and linha["RAFAEL"]
                            and str(linha["RAFAEL"]).lower() not in ["nan", ""]
                        ):
                            # Converte coluna para string se necess√°rio
                            if df["RAFAEL"].dtype != object:
                                df["RAFAEL"] = df["RAFAEL"].astype(str)
                            df.at[idx, "RAFAEL"] = novo_valor
                            alteracoes.append(f"valor: {valor_original} ‚Üí {novo_valor}")
                        elif (
                            "VALOR" in df.columns
                            and linha["VALOR"]
                            and str(linha["VALOR"]).lower() not in ["nan", ""]
                        ):
                            # Converte coluna para string se necess√°rio
                            if df["VALOR"].dtype != object:
                                df["VALOR"] = df["VALOR"].astype(str)
                            df.at[idx, "VALOR"] = novo_valor
                            alteracoes.append(f"valor: {valor_original} ‚Üí {novo_valor}")

                    # 2. Corrige classifica√ß√£o (se fornecida)
                    if nova_classificacao and "CLASSIFICACAO" in df.columns:
                        classificacao_original = str(linha.get("CLASSIFICACAO", ""))
                        df.at[idx, "CLASSIFICACAO"] = nova_classificacao
                        alteracoes.append(
                            f"classifica√ß√£o: {classificacao_original} ‚Üí {nova_classificacao}"
                        )

                    # 3. Corrige descri√ß√£o (se fornecida)
                    if nova_descricao and "DESCRICAO" in df.columns:
                        descricao_original = str(linha.get("DESCRICAO", ""))
                        df.at[idx, "DESCRICAO"] = nova_descricao
                        alteracoes.append(
                            f"descri√ß√£o: {descricao_original} ‚Üí {nova_descricao}"
                        )

                    # 4. Aplica dismiss (se solicitado)
                    if dismiss:
                        df.at[idx, "VALIDADE"] = "dismiss"
                        alteracoes.append("marcado como dismiss")
                        print(f"‚úÖ Entrada marcada como dismiss")
                    else:
                        # Adiciona informa√ß√£o na coluna VALIDADE sobre as altera√ß√µes
                        if alteracoes:
                            if "VALIDADE" in df.columns:
                                df.at[idx, "VALIDADE"] = f"fix: {', '.join(alteracoes)}"
                            else:
                                # Se n√£o existe coluna VALIDADE, adiciona
                                df["VALIDADE"] = ""
                                df.at[idx, "VALIDADE"] = f"fix: {', '.join(alteracoes)}"

                    if alteracoes:
                        print(f"‚úÖ Altera√ß√µes aplicadas: {', '.join(alteracoes)}")
                        alteracoes_aplicadas.extend(alteracoes)
                    else:
                        print(f"‚ÑπÔ∏è Nenhuma altera√ß√£o aplicada")

                # Salva o arquivo CSV atualizado
                df.to_csv(arquivo_csv, index=False)
                print(f" Arquivo {os.path.basename(arquivo_csv)} atualizado")

        # Processa rota√ß√£o e re-submiss√£o para IA se solicitado
        if arquivo_anexo and (rotate or ia):
            print(
                f"\nüîÑ Processando rota√ß√£o/re-submiss√£o para arquivo: {arquivo_anexo}"
            )

            # Aplica rota√ß√£o se solicitada
            if rotate:
                sucesso_rotacao = aplicar_rotacao_imagem(arquivo_anexo, int(rotate))
                if sucesso_rotacao:
                    print(f"‚úÖ Rota√ß√£o de {rotate}¬∞ aplicada com sucesso")
                else:
                    print(f"‚ùå Erro ao aplicar rota√ß√£o de {rotate}¬∞")

            # Re-submete para ChatGPT se solicitado
            if ia:
                sucesso_ia = re_submeter_para_chatgpt(arquivo_anexo)
                if sucesso_ia:
                    print(f"‚úÖ Re-submiss√£o para ChatGPT conclu√≠da")
                else:
                    print(f"‚ùå Erro na re-submiss√£o para ChatGPT")

        if not entrada_encontrada:
            print(f"‚ùå Nenhuma entrada encontrada com data/hora: {data} {hora}")
            return False

        print("‚úÖ Corre√ß√£o conclu√≠da com sucesso!")
        print("Dados atualizados no banco SQLite. Use o frontend React para visualiza√ß√£o.")

        # Registra a corre√ß√£o no banco de dados SQLite
        try:
            
            arguments = {
                'data_hora': data_hora,
                'value': novo_valor,
                'classification': nova_classificacao,
                'description': nova_descricao,
                'dismiss': dismiss,
                'rotate': rotate,
                'ia': ia,
            }
            
            record_fix_command_wrapper(data_hora, arguments, True, use_database=True)
            print("üìù Corre√ß√£o registrada no banco de dados SQLite")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao registrar corre√ß√£o no banco: {str(e)}")
            # Fallback para JSON se o banco falhar
            try:
                record_fix_command_wrapper(data_hora, arguments, True, use_database=False)
                print("üìù Corre√ß√£o registrada no arquivo JSON (fallback)")
            except Exception as e2:
                print(f"‚ö†Ô∏è Erro ao registrar corre√ß√£o no JSON: {str(e2)}")

        return True

    except Exception as e:
        print(f"‚ùå Erro durante a corre√ß√£o: {str(e)}")
        
        # Registra erro no banco de dados
        try:
            
            arguments = {
                'data_hora': data_hora,
                'value': novo_valor,
                'classification': nova_classificacao,
                'description': nova_descricao,
                'dismiss': dismiss,
                'rotate': rotate,
                'ia': ia,
            }
            
            record_fix_command_wrapper(data_hora, arguments, False, use_database=True)
            print("üìù Erro registrado no banco de dados SQLite")
            
        except Exception as e2:
            print(f"‚ö†Ô∏è Erro ao registrar falha no banco: {str(e2)}")
        
        return False


def dismiss_entry(data_hora):
    """Marca uma entrada como desconsiderada (dismiss) - REMOVIDO: funcionalidade CSV obsoleta"""
    print("‚ùå Funcionalidade de dismiss em arquivos CSV removida")
    print("Use a API REST ou o frontend React para marcar entradas como desconsideradas")
    return False


def aplicar_rotacao_imagem(arquivo_anexo, graus):
    """Aplica rota√ß√£o em uma imagem ou converte PDF para JPG e aplica rota√ß√£o."""
    try:

        # Determina o caminho do arquivo
        caminhos_possiveis = [
            os.path.join(ATTR_FIN_DIR_INPUT, arquivo_anexo),
            os.path.join(ATTR_FIN_DIR_IMGS, arquivo_anexo),
            arquivo_anexo,
        ]

        arquivo_path = None
        for caminho in caminhos_possiveis:
            if os.path.exists(caminho):
                arquivo_path = caminho
                break

        if not arquivo_path:
            print(f"‚ùå Arquivo n√£o encontrado: {arquivo_anexo}")
            return False

        # Se for PDF, converte para JPG primeiro
        if arquivo_path.lower().endswith(".pdf"):
            print(f"üìÑ Convertendo PDF para JPG antes da rota√ß√£o...")

            try:
                # Converte primeira p√°gina do PDF para imagem
                imagens = convert_from_path(arquivo_path, first_page=1, last_page=1)
                if not imagens:
                    print(f"‚ùå Erro ao converter PDF para imagem")
                    return False

                # Salva como JPG tempor√°rio
                nome_base = os.path.splitext(os.path.basename(arquivo_path))[0]
                jpg_temp_path = os.path.join(ATTR_FIN_DIR_IMGS, f"{nome_base}.jpg")
                imagens[0].save(jpg_temp_path, "JPEG", quality=85)

                arquivo_path = jpg_temp_path
                print(f"‚úÖ PDF convertido para JPG: {nome_base}.jpg")

            except Exception as e:
                print(f"‚ùå Erro ao converter PDF: {str(e)}")
                return False

        # Aplica rota√ß√£o na imagem
        if arquivo_path.lower().endswith((".jpg", ".jpeg", ".png")):
            try:
                # Carrega a imagem
                img = cv2.imread(arquivo_path)
                if img is None:
                    print(f"‚ùå Erro ao carregar imagem: {arquivo_path}")
                    return False

                # Aplica rota√ß√£o
                altura, largura = img.shape[:2]
                centro = (largura // 2, altura // 2)

                if graus == 90:
                    matriz_rotacao = cv2.getRotationMatrix2D(centro, 90, 1.0)
                elif graus == 180:
                    matriz_rotacao = cv2.getRotationMatrix2D(centro, 180, 1.0)
                elif graus == 270:
                    matriz_rotacao = cv2.getRotationMatrix2D(centro, 270, 1.0)
                else:
                    print(f"‚ùå Graus de rota√ß√£o inv√°lidos: {graus}")
                    return False

                # Aplica a transforma√ß√£o
                img_rotacionada = cv2.warpAffine(img, matriz_rotacao, (largura, altura))

                # Salva a imagem rotacionada (sobrescreve a original)
                cv2.imwrite(arquivo_path, img_rotacionada)

                print(
                    f"‚úÖ Rota√ß√£o de {graus}¬∞ aplicada em: {os.path.basename(arquivo_path)}"
                )
                return True

            except Exception as e:
                print(f"‚ùå Erro ao aplicar rota√ß√£o: {str(e)}")
                return False
        else:
            print(f"‚ùå Formato de arquivo n√£o suportado para rota√ß√£o: {arquivo_path}")
            return False

    except Exception as e:
        print(f"‚ùå Erro geral na rota√ß√£o: {str(e)}")
        return False


def re_submeter_para_chatgpt(arquivo_anexo):
    """Re-submete uma imagem para processamento com ChatGPT ap√≥s rota√ß√£o."""
    try:
        # Determina o caminho do arquivo
        caminhos_possiveis = [
            os.path.join(ATTR_FIN_DIR_INPUT, arquivo_anexo),
            os.path.join(ATTR_FIN_DIR_IMGS, arquivo_anexo),
            arquivo_anexo,
        ]

        arquivo_path = None
        for caminho in caminhos_possiveis:
            if os.path.exists(caminho):
                arquivo_path = caminho
                break

        if not arquivo_path:
            print(f"‚ùå Arquivo n√£o encontrado: {arquivo_anexo}")
            return False

        print(f"ü§ñ Re-submetendo para ChatGPT: {os.path.basename(arquivo_path)}")

        # Processa OCR na imagem rotacionada
        ocr_text = process_image_ocr(arquivo_path)

        if not ocr_text or ocr_text in [
            "Arquivo n√£o encontrado",
            "Erro ao carregar imagem",
            "Nenhum texto detectado",
        ]:
            print(f"‚ùå OCR n√£o conseguiu extrair texto da imagem rotacionada")
            return False

        print(f"üìù Texto extra√≠do via OCR: {ocr_text[:100]}...")

        # Re-submete para ChatGPT para extrair valor, descri√ß√£o e classifica√ß√£o

        # Extrai valor total
        valor_total = extract_total_value_with_chatgpt(ocr_text)
        if valor_total:
            print(f"üí∞ Valor extra√≠do via IA: R$ {valor_total}")
        else:
            print(f"‚ö†Ô∏è  IA n√£o conseguiu extrair valor")

        # Gera descri√ß√£o
        descricao = generate_payment_description_with_chatgpt(ocr_text)
        if descricao:
            print(f"üìù Descri√ß√£o gerada via IA: {descricao}")
        else:
            print(f"‚ö†Ô∏è  IA n√£o conseguiu gerar descri√ß√£o")

        # Classifica transa√ß√£o
        classificacao = classify_transaction_type_with_chatgpt(ocr_text)
        if classificacao:
            print(f"üè∑Ô∏è  Classifica√ß√£o via IA: {classificacao}")
        else:
            print(f"‚ö†Ô∏è  IA n√£o conseguiu classificar transa√ß√£o")

        # Atualiza o XML de OCR com o novo texto
        registrar_ocr_xml(os.path.basename(arquivo_path), ocr_text)

        print(f"‚úÖ Re-submiss√£o para ChatGPT conclu√≠da com sucesso")
        return True

    except Exception as e:
        print(f"‚ùå Erro na re-submiss√£o para ChatGPT: {str(e)}")
        return False


def process_image_with_ai_for_value(image_path, ocr_text):
    """
    Processa uma imagem com IA seguindo a sequ√™ncia l√≥gica correta:
    1. Submete o resultado do OCR (texto) contra a IA para identificar valor, classifica√ß√£o e descri√ß√£o
    2. Se a IA n√£o identificar os resultados, submete a imagem contra a IA para que ela fa√ßa OCR e identifique os resultados
    3. Se nem mesmo a IA identificar, classifica como desconhecido
    """
    try:
        # Verifica se a chave da API est√° dispon√≠vel
        api_key = ATTR_FIN_OPENAI_API_KEY
        if not api_key:
            return "", "", "desconhecido"

        # Inicializa o cliente OpenAI
        client = OpenAI(api_key=api_key)

        # PASSO 1: Tenta extrair valor, classifica√ß√£o e descri√ß√£o do texto OCR
        if ocr_text and ocr_text not in [
            "Arquivo n√£o encontrado",
            "Erro ao carregar imagem",
            "Nenhum texto detectado",
        ]:
            print(f"  - Tentando extrair informa√ß√µes do texto OCR...")
            
            # Extrai valor do OCR
            valor_total = extract_total_value_with_chatgpt(ocr_text)
            
            # Extrai classifica√ß√£o do OCR
            classificacao = classify_transaction_type_with_chatgpt(ocr_text)
            
            # Extrai descri√ß√£o do OCR
            descricao = generate_payment_description_with_chatgpt(ocr_text)
            
            # Se conseguiu extrair valor, retorna os resultados
            if valor_total:
                print(f"  - Informa√ß√µes extra√≠das do OCR: Valor={valor_total}, Classifica√ß√£o={classificacao}")
                return valor_total, descricao, classificacao

        # PASSO 2: Se n√£o conseguiu extrair do OCR, submete a imagem para a IA fazer OCR
        print(f"  - OCR n√£o conseguiu extrair informa√ß√µes, submetendo imagem para IA...")
        
        # Codifica a imagem em base64
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode("utf-8")

        # Prompt para o ChatGPT com a imagem para extrair valor, classifica√ß√£o e descri√ß√£o
        prompt = f"""
        Analise esta imagem de comprovante financeiro e extraia as seguintes informa√ß√µes:
        
        Texto OCR dispon√≠vel: {ocr_text if ocr_text else "Nenhum texto extra√≠do"}
        
        Instru√ß√µes:
        1. Identifique o valor total da transa√ß√£o
        2. Classifique o tipo de transa√ß√£o (Transfer√™ncia ou Pagamento)
        3. Gere uma descri√ß√£o curta da transa√ß√£o
        
        Retorne APENAS no formato:
        VALOR: [valor num√©rico sem R$]
        CLASSIFICACAO: [Transfer√™ncia ou Pagamento]
        DESCRICAO: [descri√ß√£o curta]
        
        Se n√£o conseguir identificar alguma informa√ß√£o, use "NENHUM" para o valor ou "desconhecido" para a classifica√ß√£o.
        """

        # Chama a API do ChatGPT com a imagem
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Usa modelo que suporta imagens
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{encoded_image}"
                            },
                        },
                    ],
                }
            ],
            max_tokens=200,
            temperature=0.1,
        )

        # Extrai a resposta
        resposta = response.choices[0].message.content.strip()
        
        # Parse da resposta
        valor_total = ""
        classificacao = ""
        descricao = ""
        
        for linha in resposta.split('\n'):
            linha = linha.strip()
            if linha.startswith('VALOR:'):
                valor = linha.replace('VALOR:', '').strip()
                if valor and valor.upper() != "NENHUM":
                    valor_total = re.sub(r"[^\d,.]", "", valor)
            elif linha.startswith('CLASSIFICACAO:'):
                classificacao = linha.replace('CLASSIFICACAO:', '').strip()
            elif linha.startswith('DESCRICAO:'):
                descricao = linha.replace('DESCRICAO:', '').strip()

        # Se conseguiu extrair valor, converte para formato brasileiro
        if valor_total:
            valor_total = normalize_value_to_brazilian_format(valor_total)
            print(f"  - Informa√ß√µes extra√≠das da imagem: Valor={valor_total}, Classifica√ß√£o={classificacao}")
            return valor_total, descricao, classificacao

        # PASSO 3: Se nem mesmo a IA conseguiu identificar, classifica como desconhecido
        print(f"  - IA n√£o conseguiu identificar informa√ß√µes, classificando como desconhecido")
        return "", "", "desconhecido"

    except Exception as e:
        print(f"Erro ao processar imagem com IA: {str(e)}")
        return "", "", "desconhecido"


def processar_arquivo_chat():
    """
    Processa o arquivo _chat.txt para extrair informa√ß√µes de data, hora e remetente
    das mensagens do WhatsApp.
    
    Returns:
        dict: Dicion√°rio com informa√ß√µes das mensagens indexadas por nome do arquivo anexo
    """
    chat_file = os.path.join(ATTR_FIN_DIR_INPUT, ATTR_FIN_ARQ_CHAT)
    
    if not os.path.exists(chat_file):
        print(f"‚ö†Ô∏è  Arquivo {ATTR_FIN_ARQ_CHAT} n√£o encontrado em {ATTR_FIN_DIR_INPUT}/")
        return {}
    
    print(f"üìÑ Processando arquivo de chat: {ATTR_FIN_ARQ_CHAT}")
    
    # Padr√£o para extrair data, hora, remetente e anexo
    # [18/04/2025, 12:45:03] Ricardo: ‚Äé<anexado: 00000006-PHOTO-2025-04-18-12-45-53.jpg>
    pattern = r'\[(\d{2}/\d{2}/\d{4}), (\d{2}:\d{2}:\d{2})\] ([^:]+): .*?<anexado: ([^>]+)>'
    
    mensagens_info = {}
    
    try:
        with open(chat_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Encontra todas as mensagens com anexos
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        
        for match in matches:
            data, hora, remetente, anexo = match
            
            # Normaliza o nome do remetente
            remetente_normalizado = normalize_sender(remetente.strip())
            
            # Armazena as informa√ß√µes
            mensagens_info[anexo] = {
                'data': data,
                'hora': hora,
                'remetente': remetente_normalizado,
                'remetente_original': remetente.strip()
            }
            
            print(f"  üìé {anexo}: {data} {hora} - {remetente_normalizado}")
        
        print(f"‚úÖ Processadas {len(mensagens_info)} mensagens com anexos")
        
    except Exception as e:
        print(f"‚ùå Erro ao processar arquivo de chat: {str(e)}")
        return {}
    
    return mensagens_info
